{"version":3,"sources":["components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","addTodo","event","preventDefault","data","target","newTodo","taskTitle","value","date","time","emoji","emjio","state","todoList","push","setState","editTodo","indexvalue","parseInt","console","log","filter","el","ind","formBasicDate","current","formBasicTime","formBasicTaskTitle","splice","deleteTodo","React","createRef","edited","this","Form","onSubmit","Group","controlId","Label","className","Control","type","placeholder","name","ref","Button","ListGroup","length","map","task","index","Item","style","backgroundColor","color","variant","marginLeft","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5681a0e.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport { Form, Button, ListGroup } from 'react-bootstrap';\n\nclass TodoList extends Component {\n  constructor() {\n    super();\n    this.formBasicDate = React.createRef();\n    this.formBasicTime = React.createRef();\n    this.formBasicTaskTitle = React.createRef();\n    this.state = {\n      todoList: [],\n      edited: false,\n    };\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const data = event.target,\n      newTodo = {\n        taskTitle: data.taskTitle.value,\n        date: data.date.value,\n        time: data.time.value,\n        emoji: data.emjio.value,\n      };\n\n    data.taskTitle.value = '';\n    data.date.value = '';\n    data.time.value = '';\n    data.emjio.value = '';\n    this.state.todoList.push(newTodo);\n\n    this.setState({\n      todoList: this.state.todoList,\n    });\n  };\n\n  editTodo = (event) => {\n    const indexvalue = parseInt(event.target.value);\n    console.log('indexvalue:', indexvalue);\n    const { date, emoji, taskTitle, time } = this.state.todoList.filter(\n      (el, ind) => ind === indexvalue\n    )[0];\n    console.log('time:', time);\n    console.log('taskTitle:', taskTitle);\n    console.log('emoji:', emoji);\n    console.log('date:');\n\n    const elementDate = this.formBasicDate.current;\n    elementDate.value = date;\n    const elementTime = this.formBasicTime.current;\n    elementTime.value = time;\n    const elementTitle = this.formBasicTaskTitle.current;\n    elementTitle.value = taskTitle;\n    this.state.todoList.splice(event.target.value, 1);\n    this.setState({\n      todoList: this.state.todoList,\n    });\n  };\n\n  deleteTodo = (event) => {\n    this.state.todoList.splice(event.target.value, 1);\n    this.setState({\n      todoList: this.state.todoList,\n    });\n  };\n\n  render() {\n    console.log(this.state.todoList);\n    return (\n      <>\n        <Form onSubmit={this.addTodo}>\n          <Form.Group controlId=\"formBasicDate\">\n            <Form.Label className=\"lab\">Select The date:</Form.Label>\n            <Form.Control\n              className=\"text\"\n              type=\"date\"\n              placeholder=\"mm/dd/yyyy\"\n              name=\"date\"\n              ref={this.formBasicDate}\n            />\n          </Form.Group>\n          <Form.Group controlId=\"formBasicTime\">\n            <Form.Label className=\"lab\">Select The Time:</Form.Label>\n            <Form.Control\n              className=\"text\"\n              type=\"time\"\n              placeholder=\"Enter the Time\"\n              name=\"time\"\n              ref={this.formBasicTime}\n            />\n          </Form.Group>\n          <Form.Group controlId=\"formBasicTaskTitle\">\n            <Form.Label className=\"lab\">write your today task:</Form.Label>\n            <Form.Control\n              className=\"text\"\n              type=\"text\"\n              placeholder=\"write something about your Task\"\n              name=\"taskTitle\"\n              ref={this.formBasicTaskTitle}\n            />\n          </Form.Group>\n          <label>Whats your feeling today</label> <br />\n          <input\n            className=\"radio-btn\"\n            name=\"emjio\"\n            type=\"radio\"\n            value=\"üòÉ\"\n          />{' '}\n          <label>üòÉ</label>\n          <input\n            className=\"radio-btn\"\n            name=\"emjio\"\n            type=\"radio\"\n            value=\"üòè\"\n          />{' '}\n          <label>üòè</label>\n          <input\n            className=\"radio-btn\"\n            name=\"emjio\"\n            type=\"radio\"\n            value=\"üò≠\"\n          />{' '}\n          <label>üò≠</label>\n          <br />\n          <Button type=\"submit\" className=\"success\">\n            Submit\n          </Button>\n        </Form>\n        <div className=\"box\">\n          <p>hii test</p>\n          <ListGroup className=\"list text-white\">\n            {this.state.todoList.length\n              ? this.state.todoList.map((task, index) => {\n                  return (\n                    <ListGroup.Item\n                      style={{ backgroundColor: '#041562', color: 'white' }}\n                      key={index}\n                      variant=\"success\"\n                    >\n                      Date: {task.date} Time: {task.time} Discription :\n                      {task.taskTitle}&nbsp; am feeling today:{task.emoji}\n                      <Button\n                        style={{ marginLeft: '50px' }}\n                        className=\"edit\"\n                        type=\"button\"\n                        onClick={this.editTodo}\n                        value={index}\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        style={{ marginLeft: '20px' }}\n                        className=\"delete\"\n                        type=\"button\"\n                        variant=\"danger\"\n                        onClick={this.deleteTodo}\n                        value={index}\n                      >\n                        Delete\n                      </Button>\n                    </ListGroup.Item>\n                  );\n                })\n              : \"You  dont have Any Todo's Today\"}\n          </ListGroup>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>My daily Todo List</h1>\n        <TodoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}